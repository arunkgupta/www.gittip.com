from decimal import Decimal, InvalidOperation

from aspen import Response
from gratipay.utils import get_participant
from gratipay.models.exchange_route import ExchangeRoute

[---------------------------------------------]

if not user.ADMIN:
    raise Response(403)

request.allow('GET', 'POST')

participant = get_participant(state)
banner = '~' + participant.username
title = "Record an exchange"

if request.method == 'GET':
    routes = website.db.all("""
       SELECT r.*::exchange_routes
         FROM exchange_routes r
        WHERE participant=%s
    """, (participant.id, ))

if request.method == 'POST':
    try:
        amount = Decimal(request.body['amount'])
        fee = Decimal(request.body['fee'])
    except InvalidOperation:
        raise Response(400, "Invalid amount/fee")

    note = request.body['note'].strip()
    if not note:
        raise Response(400, "Invalid note")

    status = request.body['status']
    if not status in ['pre', 'pending', 'failed', 'succeeded']:
        raise Response(400, "Invalid status")

    try:
        route_id = int(request.body['route_id'])
    except (KeyError, ValueError, Response):
        raise Response(400, "Invalid route_id")

    route = ExchangeRoute.from_id(route_id)
    if not route or route.participant.id != participant.id:
        raise Response(400, "Route doesn't exist")

    with website.db.get_cursor() as cursor:
        cursor.run("""
            INSERT INTO exchanges
                        (amount, fee, route, participant, recorder, note, status)
                 VALUES (%s, %s, %s, %s, %s, %s, %s)
        """, (amount, fee, route_id, participant.username, user.participant.username, note, status))

        if amount < 0:
            # For payouts, we need to take the fee out of their Gratipay balance.
            balance_adjustment = amount - fee
            update_balance = status != 'failed'
        else:
            # For payins, we don't have to worry about the fee relative to their
            # balance, because the amount is already less the fee.
            balance_adjustment = amount
            update_balance = status == 'succeeded'

        if update_balance:
            # Dropping to a negative balance is allowed here.
            balance = cursor.one("""
                UPDATE participants
                   SET balance = balance + %s
                 WHERE username=%s
             RETURNING balance
            """, (balance_adjustment, participant.username))

    website.redirect('/%s/history/' % participant.username)

[---------------------------------------------] text/html
{% extends "templates/profile.html" %}
{% block content %}

<h2>Record an Exchange</h2>
<p style="text-align: left">
    <b>Amount</b> is a black number. Positive for payins ("Credits"),
    negative for payouts ("Bank").<br>
    <b>Fee</b> is always positive.<br>
    <b>Note</b> is required.
</p>
<form action="" method="POST">
    <input name="csrf_token" type="hidden" value="{{ csrf_token }}" />
    <h3>Routes</h3>
    {% for route in routes %}
        <input type="radio" name="route_id" value="{{ route.id }}">
        {{ "%s - %s (%s)" % (route.network, route.address, route.error or "working") }}<br>
    {% endfor %}
    <input name="amount" placeholder="amount" />
    <input name="fee" placeholder="fee" />
    <select name="status">
        <option value="pre">pre</option>
        <option value="pending">pending</option>
        <option value="succeeded" selected="true">succeeded</option>
        <option value="failed">failed</option>
    </select>
    <br>
    <input name="note" placeholder="note" style="width: 420px" />
    <button type="submit">Submit</button>
</form>

{% endblock %}
