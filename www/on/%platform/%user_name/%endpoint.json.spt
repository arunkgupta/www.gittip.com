"""JSON endpoint for a Gratipay widget.
"""
import re

from aspen import json
from aspen import Response
from urllib import urlencode
from base64 import b64decode, b64encode

from gratipay.models.account_elsewhere import get_account_elsewhere

whitelisted_endpoints = ['public', 'charts']

callback_pattern = re.compile(r'^[_A-Za-z0-9.]+$')


def stringify_qs(qs, prefix='?'):
    # XXX Upstream to Aspen
    tupled = []
    for k, vals in qs.items():
        for v in vals:
            tupled.append((k, v))
    return prefix + urlencode(tupled) if tupled else ""


[-----------------------------------------------------------------------------]

endpoint = request.path['endpoint']
if not endpoint in whitelisted_endpoints:
    raise Response(404)

platform, account = get_account_elsewhere(website, state)

if account.participant.is_claimed:
    next_url = '/%s/%s.json' % (account.participant.username, endpoint)
    next_url += stringify_qs(request.qs)
    response.headers["Access-Control-Allow-Origin"] = "*"
    website.redirect(next_url, response=response)


participant = account.participant

out = { "on": request.path['platform']
      , "avatar": participant.avatar_url
       }

# CORS - see https://github.com/gratipay/aspen-python/issues/138
response.headers["Access-Control-Allow-Origin"] = "*"

# JSONP - see https://github.com/gratipay/aspen-python/issues/138
callback = request.qs.get('callback')
if callback is not None:
    if callback_pattern.match(callback) is None:
        raise Response(400, "bad callback")
    else:
        response.body = "%s(%s)" % (callback, json.dumps(out))
        response.headers['Content-Type'] = 'application/javascript'
        raise response

[---] application/json via json_dump
out
